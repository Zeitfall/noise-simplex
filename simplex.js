function simplex3D(xin, yin, zin) {
	const grad3 = [
		{x: 1, y: 1, z: 0}, {x: -1, y: 1, z: 0}, {x: 1, y: -1, z: 0}, {x: -1, y: -1, z: 0},
		{x: 1, y: 0, z: 1}, {x: -1, y: 0, z: 1}, {x: 1, y: 0, z: -1}, {x: -1, y: 0, z: -1},
		{x: 0, y: 1, z: 1}, {x: 0, y: -1, z: 1}, {x: 0, y: 1, z: -1}, {x: 0, y: -1, z: -1}
	];

	const p = [
		151,160,137,91,90,15,
		131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
		190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
		88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
		77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
		102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
		135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
		5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
		223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
		129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
		251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
		49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
		138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
	];

	const [perm, permMod12] = [[], []];

	for(let i = 0; i < 512; i++) {
		perm[i] = p[i & 255];
		permMod12[i] = perm[i] % 12;
	}


	const F3 = 1.0 / 3.0;
	const G3 = 1.0 / 6.0;



	// simplex 3D
	let n0, n1, n2, n3;

	const s = (xin + yin + zin) * F3;

	const [i, j, k] = [
		Math.floor(xin + s),
		Math.floor(yin + s),
		Math.floor(zin + s)
	];

	const t = (i + j + k) * G3;

	const [X0, Y0, Z0] = [
		i - t,
		j - t,
		k - t
	];

	const [x0, y0, z0] = [
		xin - X0,
		yin - Y0,
		zin - Z0
	];

	let i1, j1, k1;
	let i2, j2, k2;

	if(x0 >= y0) {
		if(y0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }
		else if(x0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1; }
		else { i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1; }
	} else {
		if(y0 < z0) { i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1; }
		else if(x0 < z0) { i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1; }
		else { i1 = 0; j1 = 1; k1 = 0; i2 =1 ; j2 = 1; k2 = 0; }
	}

	const [x1, y1, z1] = [
		x0 - i1 + G3,
		y0 - j1 + G3,
		z0 - k1 + G3
	];

	const [x2, y2, z2] = [
		x0 - i2 + 2.0 * G3,
		y0 - j2 + 2.0 * G3,
		z0 - k2 + 2.0 * G3
	];

	const [x3, y3, z3] = [
		x0 - 1.0 + 3.0 * G3,
		y0 - 1.0 + 3.0 * G3,
		z0 - 1.0 + 3.0 * G3
	];



	const [ii, jj, kk] = [
		i & 255,
		j & 255,
		k & 255
	];

	const [gi0, gi1, gi2, gi3] = [
		permMod12[ii + perm[jj + perm[kk]]],
    	permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]],
    	permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]],
    	permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]]
    ];



    let [t0, t1, t2, t3] = [
    	0.6 - x0**2 - y0**2 - z0**2,
    	0.6 - x1**2 - y1**2 - z1**2,
    	0.6 - x2**2 - y2**2 - z2**2,
    	0.6 - x3**2 - y3**2 - z3**2
    ];

    if(t0 < 0) n0 = 0.0;
    else {
		t0 *= t0;
		n0 = t0**2 * dot3D(grad3[gi0], x0, y0, z0);
    }

    if(t1 < 0) n1 = 0.0;
    else {
		t1 *= t1;
		n1 = t1**2 * dot3D(grad3[gi1], x1, y1, z1);
    }

    if(t2 < 0) n2 = 0.0;
    else {
		t2 *= t2;
		n2 = t2**2 * dot3D(grad3[gi2], x2, y2, z2);
    }

    if(t3 < 0) n3 = 0.0;
    else {
		t3 *= t3;
		n3 = t3**2 * dot3D(grad3[gi3], x3, y3, z3);
    }

    return 32.0 * (n0 + n1 + n2 + n3);
}

function simplex4D(x, y, z, w) {
	const grad4 = [
		{x: 0, y: 1, z: 1, w: 1}, {x: 0, y: 1, z: 1, w: -1}, {x: 0, y: 1, z: -1, w: 1}, {x: 0, y: 1, z: -1, w: -1},
		{x: 0, y: -1, z: 1, w: 1}, {x: 0, y: -1, z: 1, w: -1}, {x: 0, y: -1, z: -1, w: 1}, {x: 0, y: -1, z: -1, w: -1},
		{x: 1, y: 0, z: 1, w: 1}, {x: 1, y: 0, z: 1, w: -1}, {x: 1, y: 0, z: -1, w: 1}, {x: 1, y: 0, z: -1, w: -1},
		{x: -1, y: 0, z: 1, w: 1}, {x: -1, y: 0, z: 1, w: -1}, {x: -1, y: 0, z: -1, w: 1}, {x: -1, y: 0, z: -1, w: -1},
		{x: 1, y: 1, z: 0, w: 1}, {x: 1, y: 1, z: 0, w: -1}, {x: 1, y: -1, z: 0, w: 1}, {x: 1, y: -1, z: 0, w: -1},
		{x: -1, y: 1, z: 0, w: 1}, {x: -1, y: 1, z: 0, w: -1}, {x: -1, y: -1, z: 0, w: 1}, {x: -1, y: -1, z: 0, w: -1},
		{x: 1, y: 1, z: 1, w: 0}, {x: 1, y: 1, z: -1, w: 0}, {x: 1, y: -1, z: 1, w: 0}, {x: 1, y: -1, z: -1, w: 0},
		{x: -1, y: 1, z: 1, w: 0}, {x: -1, y: 1, z: -1, w: 0}, {x: -1, y: -1, z: 1, w: 0}, {x: -1, y: -1, z: -1, w: 0}
	];

	const p = [
		151,160,137,91,90,15,
		131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
		190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
		88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
		77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
		102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
		135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
		5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
		223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
		129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
		251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
		49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
		138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
	];

	const [perm, permMod12] = [[], []];

	for(let i = 0; i < 512; i++) {
		perm[i] = p[i & 255];
		permMod12[i] = perm[i] % 12;
	}

	const F4 = (Math.sqrt(5.0) - 1.0) / 4.0;
	const G4 = (5.0 - Math.sqrt(5.0)) / 20.0;



	// simplex 4D
	let n0, n1, n2, n3, n4;

	const s = (x + y + z + w) * F4;

	const [i, j, k, l] = [
		Math.floor(x + s),
		Math.floor(y + s),
		Math.floor(z + s),
		Math.floor(w + s)
	];

	const t = (i + j + k + l) * G4;

	const [X0, Y0, Z0, W0] = [
		i - t,
		j - t,
		k - t,
		w - t
	];

	let [x0, y0, z0, w0] = [
		x - X0,
		y - Y0,
		z - Z0,
		w - W0
	];

	let [rankx, ranky, rankz, rankw] = [0, 0, 0, 0];

	x0 > y0 ? rankx++ : ranky++;
    x0 > z0 ? rankx++ : rankz++;
    x0 > w0 ? rankx++ : rankw++;
    y0 > z0 ? ranky++ : rankz++;
    y0 > w0 ? ranky++ : rankw++;
    z0 > w0 ? rankz++ : rankw++;

    let i1, j1, k1, l1;
    let i2, j2, k2, l2;
    let i3, j3, k3, l3;

    [i1, j1, k1, l1] = [
		rankx >= 3 ? 1 : 0,
		ranky >= 3 ? 1 : 0,
		rankz >= 3 ? 1 : 0,
		rankw >= 3 ? 1 : 0
    ];

    [i2, j2, k2, l2] = [
	    rankx >= 2 ? 1 : 0,
	    ranky >= 2 ? 1 : 0,
	    rankz >= 2 ? 1 : 0,
	    rankw >= 2 ? 1 : 0
    ];

    [i3, j3, k3, l3] = [
	    rankx >= 1 ? 1 : 0,
	    ranky >= 1 ? 1 : 0,
	    rankz >= 1 ? 1 : 0,
	    rankw >= 1 ? 1 : 0
    ];

    const [x1, y1, z1, w1] = [
    	x0 - i1 + G4,
    	y0 - j1 + G4,
    	z0 - k1 + G4,
    	w0 - l1 + G4
    ];

    const [x2, y2, z2, w2] = [
    	x0 - i2 + 2.0 * G4,
    	y0 - j2 + 2.0 * G4,
    	z0 - k2 + 2.0 * G4,
    	w0 - l2 + 2.0 * G4
    ];

    const [x3, y3, z3, w3] = [
	    x0 - i3 + 3.0 * G4,
	    y0 - j3 + 3.0 * G4,
	    z0 - k3 + 3.0 * G4,
	    w0 - l3 + 3.0 * G4
    ];

    const [x4, y4, z4, w4] = [
	    x0 - 1.0 + 4.0 * G4,
	    y0 - 1.0 + 4.0 * G4,
	    z0 - 1.0 + 4.0 * G4,
	    w0 - 1.0 + 4.0 * G4
    ];

    const ii = i & 255;
    const jj = j & 255;
    const kk = k & 255;
    const ll = l & 255;
    const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;
    const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;
    const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;
    const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;
    const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;

    let [t0, t1, t2, t3, t4] = [
    	0.6 - x0**2 - y0**2 - z0**2 - w0**2,
    	0.6 - x1**2 - y1**2 - z1**2 - w1**2,
    	0.6 - x2**2 - y2**2 - z2**2 - w2**2,
    	0.6 - x3**2 - y3**2 - z3**2 - w3**2,
    	0.6 - x4**2 - y4**2 - z4**2 - w4**2
    ];

    if(t0 < 0) n0 = 0.0;
    else {
    	t0 *= t0;
    	n0 = t0**2 * dot4D(grad4[gi0], x0, y0, z0, w0);
    }

    if(t1 < 0) n1 = 0.0;
    else {
    	t1 *= t1;
    	n1 = t1**2 * dot4D(grad4[gi1], x1, y1, z1, w1);
    }

    if(t2 < 0) n2 = 0.0;
    else {
    	t2 *= t2;
    	n2 = t2**2 * dot4D(grad4[gi2], x2, y2, z2, w2);
    }

    if(t3 < 0) n3 = 0.0;
    else {
    	t3 *= t3;
    	n3 = t3**2 * dot4D(grad4[gi3], x3, y3, z3, w3);
    }

    if(t4 < 0) n4 = 0.0;
    else {
    	t4 *= t4;
    	n4 = t4**2 * dot4D(grad4[gi4], x4, y4, z4, w4);
    }

    return 27.0 * (n0 + n1 + n2 + n3 + n4);
}

function dot3D(g, x, y, z) { return g.x*x + g.y*y + g.z*z; }
function dot4D(g, x, y, z, w) { return g.x*x + g.y*y + g.z*z + g.w*w; }

module.exports.simplex3D = simplex3D;
module.exports.simplex4D = simplex4D;